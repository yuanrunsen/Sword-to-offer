# 面试题63：股票的最大利润
# 题目：假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖交易该股
# 票可能获得的利润是多少？例如一只股票在某些时间节点的价格为{9, 11, 8, 5,
# 7, 12, 16, 14}。如果我们能在价格为5的时候买入并在价格为16时卖出，则能
# 收获最大的利润11。


# 本题可基本等价于求一个数组中数对的最大差值
# 不同点是，本题是股票模型只能先买入后卖出，并且计算利润的时候不能以
# 绝对值的方式。

# 方法1：两个循环 求差值 比较得出最大差值。时间复杂度=n+n-1+n-2+n-3+.....
# 等于n的平方

# 方法2：一次循环，每次保存已遍历过点的最小值，并与当前值进行做差，比较是否大于
# 最大值，如果大于最大值则更新最大值, 具体到逻辑概念就是，不同的卖出价格只需要找出
# 最小的买入价格即可获得最大利润。

def max_diff(nums):
    if not nums or len(nums) < 2:
        return None
    min_in = min(nums[0], nums[1])
    max_out = nums[1] - nums[0]
    start = 2
    end = len(nums) - 1
    while start <= end:
        max_out = max(nums[start] - min_in, max_out)
        min_in = min(nums[start], min_in)
        start += 1
    return max_out


# 如果本题没有必须是"左边买入后边卖出"这种要求
# 只是让求数组中一对数的最大差值，也可以按照方法2这种
# 不过就不是与最小值求绝对值了，而是分别与最大值和最小值求绝对值
# 或者最简单的方法就是遍历一遍 求出最大值最小值 然后做差就行了。
