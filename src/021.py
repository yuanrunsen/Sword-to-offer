# 面试题22：链表中倒数第k个结点
# 题目：输入一个链表，输出该链表中倒数第k个结点。为了符合大多数人的习惯，
# 本题从1开始计数，即链表的尾结点是倒数第1个结点。例如一个链表有6个结点，
# 从头结点开始它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个结点是
# 值为4的结点。


class Node(object):
    def __init__(self, value):
        self.value = value
        self.next = None


# 方法一：先遍历一遍链表，求出链表的总长度n，由于本题是从1开始计算
# 那么第n-k+1个节点就是要求的节点，正向遍历到n-k+1个节点即可。
# 该方法的确定是需要遍历两遍


# 方法二：用两个指针，让两个指针保持k-1的距离，当较快的那个指针抵达链表尾部时
# 较慢的指针恰好就是在倒数第n个节点
def find_k_tail(Lnode, k):
    if k <= 0 or not Lnode:
        return None
    Pahead = Lnode
    Pbehind = Lnode
    for i in range(k-1):
        if Pahead.next:
            Pahead = Pahead.next
        else:
            return None
    while Pahead.next:
        Pahead = Pahead.next
        Pbehind = Pbehind.next
    return Pbehind.value

# 由此引申出了几个问题
# 1. 求链表的中间节点，如果链表是奇数则返回中间那一个节点
# 如果是偶数返回中间两个钟的任意一个即可
# 方法：和 链表中倒数第k个结点 类似，只需要两个快慢指针
# 较快的指针一次走两个节点，较慢的指针一次走一个节点知道走到链表尾部
# 这样，快指针的速度就是慢指针的速度的两倍，当快指针走完时链表时
# 慢指针只走了链表的一半 即链表的中间

# 2. 判断一个链表是否有环
# 方法：同上类似 只需要两个快慢指针，快指针一直走，
# 若链表没有环，那么走到链表尾部就停止，停止即为无环的判断条件
# 若链表有环 那么快指针将永远不会停，并且一定会在某个时刻与慢指针相遇，
# 相遇即为有环的判断条件
